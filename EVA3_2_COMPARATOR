/*
Ordenar sirve basicamente para una cosa: Buscar
-Busqueda Binaria --> Recursiva
-Busqueda Secuencial
 */
package eva3_2_comparator;

import java.util.Comparator;
import java.util.Iterator;
import java.util.LinkedList;

/**
 *
 * @author moviles
 */
public class EVA3_2_COMPARATOR {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // TODO code application logic here
        LinkedList<Integer> miLista = new <Integer>LinkedList();
        miLista.add((int)(Math.random() * 100));
        miLista.add((int)(Math.random() * 100));
        miLista.add((int)(Math.random() * 100));
        miLista.add((int)(Math.random() * 100));
        miLista.add((int)(Math.random() * 100));
        miLista.add((int)(Math.random() * 100));
        miLista.add((int)(Math.random() * 100));
        System.out.println(miLista);
        //Ordenar --> Comparator
        //COMPARATOR ES UNA INTERFAZ
        Comparator ordenar = new Comparator(){

            @Override
            public int compare(Object o1, Object o2) {
               Integer val1 = (Integer)o1;
               Integer val2 = (Integer)o2;
               
               return val1 - val2; 
               
            }
            
        };
        miLista.sort(ordenar);
        System.out.println(miLista);
        //
        LinkedList listaPersonas = new LinkedList();
        listaPersonas.add(new Persona("Juan","Perez","Jolote",26,150.0));
        listaPersonas.add(new Persona("Pedro","Chavez","Martinez",30,328.0));
        listaPersonas.add(new Persona("Alberto","Perez","Zaira",46,100.0));
        listaPersonas.add(new Persona("Dora","Dominguez","Estrada",39,236.0));
        listaPersonas.add(new Persona("Estela","Sanchez","Baldomero",23,315.0));
        listaPersonas.add(new Persona("Monica","Molina","Rodriguez",19,282.0));
        listaPersonas.add(new Persona("Esteban","Antunez","Garcia",38,186.0));
        //COMPARATOR: APELLIDO PATERNO
        //COMPARATOR: SALARIO
        
        //COMO RECORRER COLLECTIONS
        //ITERATOR
        
        for(Iterator<Persona> iterador = listaPersonas.iterator();
                iterador.hasNext();){
            Persona perso = iterador.next();
            System.out.println(perso.getNombre());
        }
        
    }
}
    
    class Persona{
        private String nombre;
        private String paterno;
        private String materno;
        private int edad;
        private double salario;

        public Persona(String nombre, String paterno, String materno, int edad, double salario) {
            this.nombre = nombre;
            this.paterno = paterno;
            this.materno = materno;
            this.edad = edad;
            this.salario = salario;
        }
        
       
    }
    
